#!/bin/bash	

### BEGIN INIT INFO
# Provides:          ptserver
# Required-Start:    $local_fs $remote_fs $syslog $named $network $time
# Required-Stop:     $local_fs $remote_fs $syslog $named $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stops the FOS for Turbomed
# Description:       Turbomed Arztsoftware
### END INIT INFO

##############################################################
#
# Startup script for the Poet 6.1 DB Server
#
# Date: 20020221
#
# Autor: jdb 
#
# Ver: 0.2.4
#
# Datei: poetd
#
# daemon Start | Stop | Status | Restart
#
# chkconfig: -99 1
#
#--- POET PATH -----------------------------------------------
# Mit diesem Link wird festgelegt, welche POET-Version genutzt wird.
# Nuetzlich, falls mehrere Versionen von POET installiert sind.
#   ln -s /opt/poetX.Y /opt/turbomed/dbserver
# 
# Mit diesem Link wird die Datei poetd in das init.d Verzeichnis gelinkt.
# Nuetzlich, falls init.d nicht unter /etc liegt.
#   ln -s /opt/turbomed/bin/poetd /etc/init.d/poetd
#
# Links (Start,Stop) in den entsprechenden Runlevel erzeugen.
#   runlevel 1...6 stop 3,5 start
# 

#--- Path --------------------------------------------------

ptserver="/opt/FastObjects_t7_11.0/runtime/bin/ptserver"
pt_wd="/opt/FastObjects_t7_11.0/runtime/bin"
pt_cfg="/opt/FastObjects_t7_11.0/ptserver.cfg"
pt_su="/opt/FastObjects_t7_11.0/runtime/bin/ptsu"
LD_LIBRARY_PATH="/opt/FastObjects_t7_11.0/runtime/lib"
pt_lock="/var/lock/poetd"
pid_file="/var/run/poetd.pid"

#--- Name ---
PROG_NAME="ptserver"

###############################################################
#
#             ! ab hier nicht editieren !
#
###############################################################

# System PATHs
PATH=$PATH:/sbin:/usr/sbin:/bin:/usr/bin

#--- Start ----------------------------------------------------

start()
    {
    export LD_LIBRARY_PATH
    PROG_GID=`pidof -s $PROG_NAME`
    
    #--- Ueberpruefen, ob ein Datenbankserver aktiv ist.
    if [ $PROG_GID ]
	then
	    #--- das Prog leuft schon ----------------------
	    echo "Ein Datenbankserver ist bereits aktiv (daher wurde der Start abgebrochen): $PROG_NAME pid: $PROG_GID"
	    #-----------------------------------------------
	else
	    #--- Start vom Prog ----------------------------

	    # Ueberpruefung PTserver 	    
	    if [ ! -x $ptserver ] 
		then
	            echo "ERORR : Das Datenbankserver-Programm wurde nicht gefunden: $ptserver"
		    exit 1
	    fi
	    
	    # Ueberpruefung PTserverconfig 
	    if [ ! -f $pt_cfg ] 
		then
	            echo "ERORR : Die Konfigurationsdatei des Datenbankservers wurde nicht gefunden: $pt_cfg"
		    exit 1
	    fi

	    # Start PTServer 
	    #
            echo
	    echo "Der Datenbankserver wird gestartet: $PROG_NAME"
            echo -----------------------------------------------------------------------
	    cd $pt_wd
	    $ptserver -config $pt_cfg &
	    PROGID=`pidof -s ptserver` 
            echo $PROGID | cut --delimiter=] --fields=2 > $pid_file
	    
	    sleep_
            echo -----------------------------------------------------------------------
	    PROG_GID=`pidof -s $PROG_NAME`	   
	    #--- Test, ob Prozess schon laeuft ..
	    if [ $PROG_GID ]
		then
		#--- das Prog laeuft  -----------------------
                echo
		echo "Der Start des Datenbankservers war erfolgreich: $PROG_NAME  pid: $PROG_GID"
                echo
		echo > $pt_lock
		exit 0
		#-------------------------------------------
		else
		#-----
		echo -n "#"
	    fi	

            echo

#-------------------------------------------------------------------------
    fi

    }

#--- Stop -----------------------------------------------------

stop()
    {
    # Stop PTServer
    if [ -f $pid_file ] 
        then
        PROG_GID=`cat $pid_file`

        echo

        if [ $PROG_GID ]
            then
                echo "Der Datenbankserver wird beendet: $PROG_NAME mit pid: $PROG_GID"
	        ##kill -TERM $PROG_GID
                killall -s TERM ptserver
                sleep_
	    else
	        echo "Der Datenbankserver ist nicht mehr aktiv. Eine Beendigung ist daher nicht erforderlich."
	        exit 1
        fi
    fi

    echo 

    PROG_GID=`pidof -s $PROG_NAME`
    if [ $PROG_GID ]
	then
	    echo "Trotz Beendigungsversuch laeuft immer noch ein  $PROG_NAME Prozess mit pid $PROG_GID."
            echo " ( es kann sich dabei auch um eine zweite Prozessinstanz handeln )"
	else
	    echo "Der Datenbankserver $PROG_NAME ist nicht mehr aktiv."
	    rm -f $pt_lock
	    rm -f $pid_file
    fi

    echo
    }

#--- Status -----------------------------------------------------

status()
    {
    # status PTServer

    echo

    PROG_GID=`pidof -s $PROG_NAME`
    if [ $PROG_GID ]
	then
	    echo "$PROG_NAME pid: $PROG_GID                                    running"
	else
	    echo "$PROG_NAME                                             unused"
    fi
    	    
    # Ueberpruefung PTserver 	    
    if [ ! -x $ptserver ] 
	then
	    echo "ERORR : Das Datenbankserver-Programm wurde nicht gefunden: $ptserver"
    fi
	    
    # Ueberpruefung PTserverconfig 
    if [ ! -f $pt_cfg ] 
	then
	    echo "ERORR : Die Konfigurationsdatei des Datenbankservers wurde nicht gefunden: $pt_cfg"
    fi
    echo

    }

#--- sleep ----------------------------------------------------

sleep_()
    {
	sleep 5
    }

#--- Auswertung der Aufrufparameter ----------------------------------

case "$1" in
  start)
    # 3 * start
    start
    start
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    sleep_
    start
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart}"
    exit 1
esac
exit 0

#--- END ---------------------------------------------------

